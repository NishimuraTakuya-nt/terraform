name: Terraform Validation

on:
  pull_request:
    branches:
      - main
    paths:
      - 'env/**'
      - 'target.txt'
    types: [opened, synchronize, labeled]

jobs:
  read_target_file:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Read target file
        id: target
        run: |
          targets=$(cat target.txt | grep -v "^#" | awk '{print "{\"action\": \""$1"\", \"workdir\": \""$2"\"}"}' | jq -s -c)
          echo "matrix=$targets" >> $GITHUB_OUTPUT
    outputs:
      matrix: ${{ steps.target.outputs.matrix }}

  validation:
    needs: read_target_file
    runs-on: ubuntu-latest

    strategy:
      matrix:
        target: ${{ fromJson(needs.read_target_file.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1800

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.0

      - name: Install tflint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
      - name: Set tflint path
        run: echo "$HOME/.tflint/bin" >> $GITHUB_PATH

      - name: Terraform Format
        run: terraform fmt -check
        working-directory: ${{ matrix.target.workdir }}

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ matrix.target.workdir }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ matrix.target.workdir }}

      - name: Terraform Lint
        run: tflint
        working-directory: ${{ matrix.target.workdir }}

  # run-plan„É©„Éô„É´„Åå„Å§„ÅÑ„Å¶„ÅÑ„ÇãÂ†¥ÂêàÂÆüÊñΩ„Åô„Çã
  plan:
    needs: [read_target_file, validation]
    if: contains(github.event.pull_request.labels.*.name, 'run-plan')
    runs-on: ubuntu-latest

    strategy:
      matrix:
        target: ${{ fromJson(needs.read_target_file.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1800

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.0

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ matrix.target.workdir }}

      - name: Terraform Plan
        id: plan
        run: |
          if [ "${{ matrix.target.action }}" == "apply" ]; then
            terraform plan -input=false
          elif [ "${{ matrix.target.action }}" == "destroy" ]; then
            terraform plan -destroy -input=false
          else
            echo "Invalid action: ${{ matrix.target.action }}"
            exit 1
          fi
        working-directory: ${{ matrix.target.workdir }}
        continue-on-error: true

      - uses: actions/github-script@v6
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan üìñ (${{ matrix.target.action }}) ${{ matrix.target.workdir }} \`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

